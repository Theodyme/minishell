# ---------------------------------------------------------------------------- #
# ------------------------------ WAITING PROCESS ----------------------------- #

			pid_t		wait(int *wstatus);
LIBS:			sys/wait.h
USAGE:			suspend l execution du thread actuel jusqu a ce qu un de ses enfants ne meurt.
RETOUR:			si succes, wait() retourne l ID du process qui s est acheve.
				sinon, elle renvoie -1.

NOTE:			l appel 					wait(&wstatus);
				est equivalent a l appel	waitpid(-1, &wstatus, 0);


			pid_t		wait3(int *status, int options, struct rusage *rusage);
			pid_t		wait4(pid_t pid, int *status, int options, struct rusage *rusage);
LIBS:			sys/wait.h
				sys/time.h
				sys/resource.h
				sys/types.h
USAGE:			equivalent a waitpid(), a la difference qu elles ecrivent dans RUSAGE l utilisation des ressources de l enfant.
				wait3() attend pour n importe quel enfant.
				wait4() peut attendre un ou des enfant.s specifique.s.
RETOUR:			renvoie, comme waitpid(), l ID du process qui a change de statut.

NOTE:			l appel 					wait3(status, options, rusage);
				est equivalent a l appel	waitpid(-1, status, options);

				et l appel 					wait4(pid, status, options, rusage);
				est equivalent a l appel	waitpid(pid, status, options);


# ------------------------------ SUR LES SIGNAUX ----------------------------- #

		A child created via fork(2) inherits a copy of its parents
		signal dispositions.  During an execve(2), the dispositions of
		handled signals are reset to the default; the dispositions of
		ignored signals are left unchanged.

# --------------------------------- FONCTIONS -------------------------------- #

/!\ il est recommande dans les man de privilegier sigaction() a signal() en raison d un comportement pouvant varier entre
les differentes versions UNIX et linux.

			sighandler_t	signal(int signum, sighandler_t handler);
LIBS:			signal.h
USAGE:			attribue au HANDLER la position SIGNUM. (il s agit soit de 'SIG_IGN', soit de 'SIG_DFL', soit de l adresse d une
				fonction signal_handler.)
RETOUR:			renvoie la valeur precedente du signal handler.
				en cas d erreur, renvoie le signal 'SIG_ERR', et errno indiquera l erreur.
NOTE:
'SIG_IGN'		le signal doit etre ignore.
'SIG_DFL'		l action par defaut associe au signal doit avoir lieu.
Si on attribue une fonction signal_handler, la position est reset a 'SIG_DFL', ou le signal est bloque, avant que la fonction handler
ne soit appelee avec SIGNUM pour argument. Dans le cas ou le signal est bloque, il sera debloque a la sortie de la fonction handler.

Les signaux 'SIGKILL' et 'SIGSTOP' ne peuvent pas etre ignores ou interceptes.


# -------------------- A REVERIFIER JE COMPRENDS RIEN ALED ------------------- #

			int				sigaction(int signum, const struct sigaction *restrict act, struct sigaction *restrict oldact);
LIBS:			signal.h
USAGE:			equivalent a signal(). (?)
				si ACT est non-nul, la nouvelle action pour le signal signum en dependra.
				si OLDACT est non-nul, l action precedente est sauvegardee dans OLDACT.
RETOUR:

# ---------------------------------------------------------------------------- #


